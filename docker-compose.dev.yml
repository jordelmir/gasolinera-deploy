services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gasolinera-postgres-dev
    environment:
      POSTGRES_DB: gasolinera_dev
      POSTGRES_USER: gasolinera_user
      POSTGRES_PASSWORD: gasolinera_pass
      POSTGRES_MULTIPLE_DATABASES: auth_db,coupon_db,station_db,redemption_db,raffle_db
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - gasolinera-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U gasolinera_user -d gasolinera_dev']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gasolinera-redis-dev
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - gasolinera-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: gasolinera-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: gasolinera_user
      RABBITMQ_DEFAULT_PASS: gasolinera_pass
      RABBITMQ_DEFAULT_VHOST: gasolinera_vhost
    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - gasolinera-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  # HashiCorp Vault (Development mode)
  vault:
    image: hashicorp/vault:1.15
    container_name: gasolinera-vault-dev
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - '8200:8200'
    cap_add:
      - IPC_LOCK
    networks:
      - gasolinera-network
    healthcheck:
      test: ['CMD', 'vault', 'status']
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: gasolinera-prometheus-dev
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gasolinera-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: gasolinera-grafana-dev
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - gasolinera-network
    depends_on:
      - prometheus

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: gasolinera-jaeger-dev
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - '16686:16686' # Jaeger UI
      - '14268:14268' # Jaeger collector HTTP
      - '14250:14250' # Jaeger collector gRPC
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver
    networks:
      - gasolinera-network

  # Elasticsearch (for ELK stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: gasolinera-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - gasolinera-network

  # Kibana (Log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: gasolinera-kibana-dev
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - '5601:5601'
    networks:
      - gasolinera-network
    depends_on:
      - elasticsearch

  # Logstash (Log processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: gasolinera-logstash-dev
    volumes:
      - ./infrastructure/monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./infrastructure/monitoring/logstash/config:/usr/share/logstash/config
    ports:
      - '5044:5044'
      - '9600:9600'
    networks:
      - gasolinera-network
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  gasolinera-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
